# Check interface
ifconfig

# Change MAC address
# Note: this only changes in memory, not physically. Should reset once the device restarts
# ----------------------------------------------
ifconfig [name of interface] down # disable the interface
ifconfig [name of interface] hw ether [new mac address] 
ifconfig [name of interface] up 


# Check wireless interface
iwconfig

# Change from managed (default) to monitor (can be used to capture packages in range)
ifcondig [name of interface] down
aairmon -ng check kill # disable wireless connection
iwconfig [name of interface] mode monitor
ifconfig [name of interface] up


#--------------------------------------
Pre Connection Attacks
#--------------------------------------

# Packet Sniffing basics (Using Airodump-ng)
Airodump-ng is a packet sniffer
Used to capture all packets within range
Display detailed info about networks around us

1. Scan the area for all the available networks:
	- Enable moniitor mode on wireless adapter
	- airodump-ng [interface name], e.g. mon0: (this will not show all the networks, bcs airodump-ng only sniffs on 2.4 GHz, dependinig on the wireless adapter.)
		- BSSID = MAC address of target network
		- PWR = signal strength or power of network. More +ve number has stronger signal
		- Beacons = frames sent by the network and are ther to broadcast its existence. Even if network is hidden it will always broadcast these frames telling all devices that it exists
		- CH = which channel the network is working on
		- #Data = num of data packets which are useful
		- #/s = num of data packets collected in the past 10 seconds
		- MB = max speed supported by the network
		- CIPHER = cipher used in the network
		- AUTH = authentication used in the network
		- ENC = encryption mode used by the network
		- ESSID = name of network

	Tell to sniff on 5 GHz:
	airodump-ng --band a [interface name, e.g. mon0]. # --band a = that works with 5 GHz frequencies
		- can use multiple bands, e.g. --band abg (for both 2.4 and 5 GHz at the same time) # slightly slower and needs a more powerful wireless adapter

2. Targeted packet sniffing:
	airodump-ng --bssid [BSSID] --channel [channel num from the details from prev step] --write "[filename, e.g. test]" [name of wireless adapater, e.g. mon0] # --channel is to specify the channel,  --write is optional if want to write to a file

	- Bottom section: 
		- STATION: all clients connected to the network
		- Rate: speed
		- Lost = packet lost
		- Frames = num of data frames captured
		- Probe = devices not connected but still looking for networks

	When stopped, a new file pops up and it contains data captured during the runtime of airo-ng (data sent to and from the network). Main file = .cap, these packets are encrypted using the encryption mode specified

	When using wireshark, not that useful because the data is encrypted



3. Deauthentication attack: (works on encrypted networks, no need to know network key or connect to the network. Can be used for social engineering ):
	Make devices disconnect from the network
	- Spoof MAC address to the target client's MAC and pretend that we send request to the router for disconnection
	- Spoof MAC address to the router's MAC and approve the disconnection
	- use aireplay-ng --deauth [num of deauth packets, rly large number so that it keeps sending the se packets to the router and the target device so it is disconnected for a along period of time, to stop = stop the program e.g. 10000000] -a [MAC address of the network] -c [MAC address of the target client] -D(if target network is 5 GHz) [name of interfae, e.g. mon0] #this might fail if airocump-ng is not running against the target network, so use (2.). so use 2 terminals 



#--------------------------------------
Gaining Access
#--------------------------------------

1. WEP (Wired Equivalent Privacy)Cracking:
	- Encryption -> using IV (Initialisation Vector = random 24 bits+password, add to info = packet). Packets sent will contain the IV. The router already has the password so password is not sent.
	- Weakness: IV is in plain text, listeners can see the IV and use statistical attacks to decrypt

	We need to:
	a. Capture a large number of packets/IVs (using airodump-ng)
	b. Analyse the captured IVs and crack the key (using aircrack-ng)

	Steps: 
	a. Use preconnection attack #2
		-on the #Data column -> num of useful packets that use different IVs that we can use in order to crack the key
	b. Use another terminal, 
		aircrack-ng [filename produced in a, .cap file]  
	c. Key Found
	d. (i) Connect to the network using ASCII password (not always going to appear)
								OR
	   (ii) Connect using the numbered keys (always going to appear) #Can connect from Kali, but when enable monitor mode we kill a lot of processes and when restart the processes getting connected to target can be buggy. Best to restart Kali and connect. 
	   		- Remove the colons
	   		- Use this number as password whhen connecting

	PROBLEM:
	If network is not busy, it would take some time to capture enough IVs
	Solution:
	Force the AP to generate new IVs
		Use fake authentication
		- Assosciate with the AP before launching the attack
			Terminal 1:
				- airodump-ng the network, see that #Data is not increasing by much
			Terminal 2:
				- aireplay-ng --fakeauth [0, this is the interval and we only want to do this once] -a [MAC address of the target network] -h [MAC address of wireless adapter, get from ifconfig, take first 12 digits of unspec, replace "-" with colon] [name of wireless adapter, e.g. mon0]
				# we are not yet connected to the network, only assosicated so we can communicate with it.
				See that in terminal #1 we can see a new client (attacker) is there
				After assosciating, we can force AP to generate new packets

	ARP Request Replay (have to assosicate first)
		- Wait for ARP packet
		- Capture it and replay it
		- This causes AP to produce another packet with new IV
		- Keep doing this to get enough IVs and do steps

		Use aireplay-ng --arpreplay -b [MAC address of the target network] -h [MAC address of wireless adapter, get from ifconfig, take first 12 digits of unspec, replace "-" with colon] [name of wireless adapter, e.g. mon0] # similar to above

		Once ARP packet is captured and replayed, the router is forced to generate a new packet with new IVs every time and #Data increases significantly faster

		Then use step b. #The IV length can be modified (64 or 128 bits) so it may take longer.



2. WPA and WPA2 cracking: (this method will work with the same method)
	- Much more secure than WEP
	- Each packet is encrypted using a unique temporary key
	- The only packets that can aid with the cracking process are the handshake packets (4 packets)

	WPS is a feature that can be used with WPA and WPA2, which allows clients to connect without the password

	ONLY IF WPS IS ENABLED AND MISCONFIGURED(needs to be configured to use a normal pin authentication, not PBC): # worth a try every time
	- Usually used by printers, press a button and it connects to the network using an 8 digit pin
	- Can brute force the pin and compute the actual password
	# This only works if the router is configured not ot use the PBC (push button authentication, where the WPS pin must be pushed on the router)

		- Display all networks that have WPS enabled:
			wash --interface [interface name]
			LCK = if WPS lock is enabled. If yes, it means that WPS will lock after a few number of tries
		- Terminal 1:
			- run Reaver (to brute force the pin)
				reaver --bssid [network BSSID] --channel [channel number] --interface [wireless adapter name, e.g. mon0] [-vvv, verbose] --no-assosciate (better to do this, better success rate)
		- Assosciate with the network
		- Success
		- Look for WPA PSK and use it to connect to the network


	ELSE 
	a. Capture a handshake
		- Terminal #1: airodump-ng from targeted packet sniffing
			- Wait for handshake to happen (until a new client connect to the network)
								OR
			- Terminal #2: deauth attack for a short period of time to an existing client so that a handshake happens
		- WPA handshake appears on terminal #1
		# The handshake does not contain any info to recover the key, but contains data that can  be used to chekc if a key is valid

	b. Use a wordlist to bruteforce (the only known attack for WPA and WPA2)
		- Use crunch to create one
			crunch [min] [max] [characters that can be used] -o [FileName, .txt] -t [pattern], many more flags (look at -p too)
			pattern -> use @ for wilidcard, e.g. a@@@b = aaaab, aaabb, azdjb, etc.
							OR
		- Use a premade one like rockyou

		- Using aircrack-ng Separate MIC (Message Integrity Code) from handshake packet headers, use headers + prediction password from wordlist and compare to MIC. If same, then password is correct. Else, iterate through the other predictions from the wordlist. 
			aircrack-ng [captured handshake filename, e.g. wpa_handshake-01.cap] -w [wordlist]

		Ways to make it faster:
			- use GPU instead of CPU
			- use rainbow tables
			- pipe wordlist as it is being created from crunch to aircrack-ng, so it does not use storage
			- pause the cracking progress and come back after a while without losing progress 



#----------------------------------------------------
Configuring wireless settings for maximum security
#----------------------------------------------------
Go to router settings
Change Security to WPA2, long password with symbols, numbers, upper and lower case letters, etc
Turn off WPS pin authentication
MAC filter/access control


#----------------------------------------------------
Post Connection Attacks
#----------------------------------------------------




























